package nlpart;

import java.util.*;

/*
 * This class stores all the "Literals" and the "Predicates" that are found in the Question asked. 
 * 
 * There are two main functions in this Lexicon class
 * 1. getLiteral()
 * 2. getPredicate()
 * */	
public class Lexicon {

	private List<LexiconPredicate> predicateList;
    private List<LexiconLiteral> literalList;
    private Boolean predicateFilled;
    private Boolean literalFilled;
    
	public Lexicon(){
		predicateList = new ArrayList<LexiconPredicate>();
        literalList = new ArrayList<LexiconLiteral>();
        predicateFilled = false;
        literalFilled = false;
	}
	
	
	public List<LexiconPredicate> getPredicates(String question) throws Exception{
		//List<String> permutations = getPermutations(question);
		getPermutations(question);
		return this.predicateList;
	}
	
	public void getPermutations(String question) throws Exception{
		System.out.print("Called getpredicates");
		List<String> permutationList = null;
		
		List<String> splitQuestion = new ArrayList<String>();
		splitQuestion = Arrays.asList(question.split(" "));
		List<String> notRequiredWords = new ArrayList<String>();
		notRequiredWords.add("who");
		notRequiredWords.add("could");
		notRequiredWords.add("please");
		notRequiredWords.add("the");
		notRequiredWords.add("a");
		notRequiredWords.add("how");
		notRequiredWords.add("many");
		notRequiredWords.add("what");
		notRequiredWords.add("would");
		Iterator<String> quesIter = splitQuestion.iterator();
		
		//Removing the unwanted words from the question
		while(quesIter.hasNext()){
			for (int i = 0; i < notRequiredWords.size(); i++) {
				System.out.print(quesIter.next() + "=>" + notRequiredWords.get(i)+ "\n");
				
			}
		}
		for (String string : splitQuestion) {
			System.out.println(string);
		}
		// This is the permutation algorithm
		
		//return permutationList;
	}
	
}
